create table "public"."service_event_live_stream" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone default now(),
    "service_event_id" uuid,
    "join_url" text,
    "password" text,
    "start_url" text
);


alter table "public"."service_event_live_stream" enable row level security;

alter table "public"."service_group" add column "color" text;

CREATE UNIQUE INDEX service_event_live_stream_pkey ON public.service_event_live_stream USING btree (id);

alter table "public"."service_event_live_stream" add constraint "service_event_live_stream_pkey" PRIMARY KEY using index "service_event_live_stream_pkey";

alter table "public"."service_event_live_stream" add constraint "service_event_live_stream_service_event_id_fkey" FOREIGN KEY (service_event_id) REFERENCES service_event(id) ON DELETE CASCADE not valid;

alter table "public"."service_event_live_stream" validate constraint "service_event_live_stream_service_event_id_fkey";

set check_function_bodies = off;

create or replace view "public"."decrypted_service_event_live_stream" as  SELECT service_event_live_stream.id,
    service_event_live_stream.created_at,
    service_event_live_stream.updated_at,
    service_event_live_stream.service_event_id,
    service_event_live_stream.join_url,
    service_event_live_stream.password,
        CASE
            WHEN (service_event_live_stream.password IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('6b567699-3d50-4237-89f5-97c96c2421c0' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(service_event_live_stream.password, 'base64'::text), convert_to(''::text, 'utf8'::name), '6b567699-3d50-4237-89f5-97c96c2421c0'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_password,
    service_event_live_stream.start_url,
        CASE
            WHEN (service_event_live_stream.start_url IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('9f03f350-e384-40b7-9af0-58cac866c58c' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(service_event_live_stream.start_url, 'base64'::text), convert_to(''::text, 'utf8'::name), '9f03f350-e384-40b7-9af0-58cac866c58c'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_start_url
   FROM service_event_live_stream;


CREATE OR REPLACE FUNCTION public.service_event_live_stream_encrypt_secret_password()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.password = CASE WHEN new.password IS NULL THEN NULL ELSE
			CASE WHEN '6b567699-3d50-4237-89f5-97c96c2421c0' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.password, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'6b567699-3d50-4237-89f5-97c96c2421c0'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.service_event_live_stream_encrypt_secret_start_url()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.start_url = CASE WHEN new.start_url IS NULL THEN NULL ELSE
			CASE WHEN '9f03f350-e384-40b7-9af0-58cac866c58c' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.start_url, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'9f03f350-e384-40b7-9af0-58cac866c58c'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE TRIGGER service_event_live_stream_encrypt_secret_trigger_password BEFORE INSERT OR UPDATE OF password ON public.service_event_live_stream FOR EACH ROW EXECUTE FUNCTION service_event_live_stream_encrypt_secret_password();

CREATE TRIGGER service_event_live_stream_encrypt_secret_trigger_start_url BEFORE INSERT OR UPDATE OF start_url ON public.service_event_live_stream FOR EACH ROW EXECUTE FUNCTION service_event_live_stream_encrypt_secret_start_url();


